const AppConstants = {
  redirectionKey: 'redirect_url',
  toastMessages: {
    groupCreated: 'Group Created Successfully',
    groupUpdated: 'Group Updated Successfully',
    searchName: 'Please enter search name',
    biReport: 'Please select a BI Report to continue',
    schedule: 'Please select a schedule',
    selectFile: 'Please select a document to continue',
    selectFolder: 'Please select a folder to continue',
    selectCategory: 'Please select a category to continue',
    loginFailedMsg: 'Login failed',
    loginTokenFailed: 'Your session has expired',
    loginTokenFailedMsg: 'Your session has expired, Please login again',
    sessionExpired: 'your session has timed out',
    sessionExpiredMsg: 'Your session has timed out, Please login again',
    permissionDenied: 'You do not have access for this operation',
    permissionDeniedMsg: 'You do not have access for this operation',
    loginSuccessfull: 'Logged in successfully',
    resetPassSuccessfull: '',
    fieldRequired: 'This field is required',
    fieldRequiredMandatory: 'A mandatory field is not filled',
    addTime: 'Please add time',
    addDate: 'Please add date',
    addRequest: 'Please add request',
    unknownError: 'Unknown error occured',
    notFound: 'Request failed with status code 404',
    notFoundMsg: 'User not found, please enter correct username',
    serverError: 'Request failed with status code 500',
    serverErrorMsg: 'Server error, Unable to serve you at the moment',
    invalidUserNameOrPassword: 'Invalid username or password',
    noDatabaseFound: 'User does not have access to any database',
    licenceError:
      'Your licencekey could not be validated. Please contact SmartFolders administrator to get correct licence key to use this application',
    licenceErrorMsg:
      'Your licence key could not be validated. Please contact SmartFolders administrator to get correct licence key to use this application',
    folderCreatedMsg: 'Folder created successfully',
    folderCreatedFailed: 'Could not create folder at the moment',
    fileCreatedMsg: ' Document created successfully',
    fileUploadedMsg: 'Document created successfully',
    fileUploadedFailed: 'Could not create document at the moment',
    fileUpdateFailed: 'Failed to update document at the moment',
    fileUpdateSuccess: 'Document updated successfully',
    foldersReceived: 'Folders received successfully',
    docAttach: 'Document Attatched',
    docSupersede: 'Document marked as superseded',
    docDetach: 'Documents detached',
    documentUpdateFailed: 'Failed to update document at the moment',
    documentUpdateSuccess: 'Document updated successfully',
    securityUpdatedMsg: 'Secuirty updated successfully',
    securityUpdatedFailed: 'Failed to update secuirty details',
    searchWarning: 'Please enter text to search',
    databaseWarning: 'Please select at least one database to search',
    addFOISuccess: 'Freedom Of Information added successfully',
    addFOIFailed: 'Failed to add freedom of information at the moment',
    revokeMsg: 'Access to report cannot be revoked from last user',
    groupAlreadyExit:
      'could not execute statement; SQL [n/a]; constraint [name_UNIQUE]; nested exception is org.hibernate.exception.ConstraintViolationException: could not execute statement',
    groupAlreadyExitMsg:
      'Group with this name already exist, Please use another name',
  },
  docTypes: [
    '.doc',
    '.docx',
    '.xls',
    '.xlsx',
    '.txt',
    '.txt',
    '.pdf',
    '.rtf',
    '.csv',
    '.html',
    '.mhtml',
    '.ods',
    '.ots',
    '.pfda',
    '.xml',
    '.ppt',
    '.pptx',
    '.msg',
    '.tif',
    '.tiff',
    '.png',
    '.jpeg',
    '.jpg',
    '.gif',
    '.bmp',
    '.eml',
  ],
  dateTimeFormat: 'DD-MMM-YYYY, hh:mm:ss A',
  datePicker: {
    dateTime: 'datetime',
    time: 'time',
    date: 'date',
  },
};
export default AppConstants;
